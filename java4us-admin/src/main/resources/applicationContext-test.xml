<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd        
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="classpath:java4us_test.properties" />

	<context:component-scan base-package="com.java4us" />

	<context:annotation-config />

	<context:spring-configured />

	<aop:config proxy-target-class="true" />

	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.db.driverClassName}" />
		<property name="url" value="${jdbc.db.url}" />
		<property name="username" value="${jdbc.db.username}" />
		<property name="password" value="${jdbc.db.password}" />
		<property name="maxWait" value="30000" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.java4us.domain" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="com.java4us.commons.cache.MemcachedCache">
					<constructor-arg name="name" value="default" />
					<constructor-arg name="cacheService" ref="cacheService" />
					<constructor-arg name="expiry" value="3600" />
				</bean>
				<bean class="com.java4us.commons.cache.MemcachedCache">
					<constructor-arg name="name" value="sixhourcache" />
					<constructor-arg name="cacheService" ref="cacheService" />
					<constructor-arg name="expiry" value="21600" />
				</bean>
				<bean class="com.java4us.commons.cache.MemcachedCache">
					<constructor-arg name="name" value="fifteenmincache" />
					<constructor-arg name="cacheService" ref="cacheService" />
					<constructor-arg name="expiry" value="900" />
				</bean>
				<bean class="com.java4us.commons.cache.MemcachedCache">
					<constructor-arg name="name" value="onedaycache" />
					<constructor-arg name="cacheService" ref="cacheService" />
					<constructor-arg name="expiry" value="86400" />
				</bean>
				<bean class="com.java4us.commons.cache.MemcachedCache">
					<constructor-arg name="name" value="fivemincache" />
					<constructor-arg name="cacheService" ref="cacheService" />
					<constructor-arg name="expiry" value="300" />
				</bean>
			</set>
		</property>
	</bean>

	<bean id="couchBaseUri" class="java.net.URI">
		<constructor-arg value="${couchbase.pools}" />
	</bean>

	<util:list id="couchBaseBucketList">
		<ref bean="couchBaseUri" />
	</util:list>

	<bean id="couchbaseConnectionFactoryBuilder" class="com.couchbase.client.CouchbaseConnectionFactoryBuilder">
		<property name="opTimeout" value="${couchbase.optimeout}" />
		<property name="opQueueMaxBlockTime" value="${couchbase.opqueuemaxblocktime}" />
	</bean>

	<bean id="couchbaseClient" class="com.couchbase.client.CouchbaseClient">
		<constructor-arg name="cf">
			<bean factory-method="buildCouchbaseConnection" factory-bean="couchbaseConnectionFactoryBuilder">
				<constructor-arg name="baseList" ref="couchBaseBucketList" />
				<constructor-arg name="bucketName" value="${couchbase.defaultbucket}" />
				<constructor-arg name="pwd" value="" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="java4UsCouchbaseClient" class="com.couchbase.client.CouchbaseClient">
		<constructor-arg name="cf">
			<bean factory-method="buildCouchbaseConnection" factory-bean="couchbaseConnectionFactoryBuilder">
				<constructor-arg name="baseList" ref="couchBaseBucketList" />
				<constructor-arg name="bucketName" value="${couchbase.java4usbucket}" />
				<constructor-arg name="pwd" value="${couchbase.java4us.pass}" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="cacheService" class="com.java4us.commons.cache.CacheService">
		<property name="couchbaseClient" ref="couchbaseClient" />
	</bean>

	<bean id="java4UsCacheService" class="com.java4us.commons.cache.CacheService">
		<property name="couchbaseClient" ref="java4UsCouchbaseClient" />
	</bean>
	
	<!-- Spring + QUARTZ -->
	
	<bean id="asyncJavaWorkerBean" class="com.java4us.batch.component.AsyncJavaWorker" />

	<bean id="asyncAndroidWorkerBean" class="com.java4us.batch.component.AsyncAndroidWorker" />

	<bean name="jobJavaDetailBean"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
		p:jobClass="com.java4us.batch.service.JavaSchedulerJob">
		<property name="jobDataAsMap">
			<map>
				<entry key="asyncJavaWorker">
					<ref bean="asyncJavaWorkerBean" />
				</entry>
			</map>
		</property>
	</bean>

	<bean name="jobAndroidDetailBean"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
		p:jobClass="com.java4us.batch.service.AndroidSchedulerJob">
		<property name="jobDataAsMap">
			<map>
				<entry key="asyncAndroidWorker">
					<ref bean="asyncAndroidWorkerBean" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="javaCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
		p:jobDetail-ref="jobJavaDetailBean" p:startDelay="10000"
		p:cronExpression="0/10 * * * * ?" />

	<bean id="androidCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
		p:jobDetail-ref="jobAndroidDetailBean" p:startDelay="10000"
		p:cronExpression="0/10 * * * * ?" />

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		p:waitForJobsToCompleteOnShutdown="true">
		<property name="triggers">
			<list>
				<ref bean="javaCronTrigger" />
				<ref bean="androidCronTrigger" />
			</list>
		</property>
	</bean>

	<!-- Rabbit MQ -->
	<rabbit:connection-factory id="connectionFactory"
		host="localhost" virtual-host="java4usVhost" username="java4usadmin"
		password="q1w2e3r4" channel-cache-size="25" />

	<rabbit:admin connection-factory="connectionFactory" />

	<rabbit:queue name="FeedMessageQueue" />

	<rabbit:topic-exchange name="Java4UsExChange">
		<rabbit:bindings>
			<rabbit:binding queue="FeedMessageQueue" pattern="java4us.routingkey.feedMessage">
			</rabbit:binding>
		</rabbit:bindings>
	</rabbit:topic-exchange>

	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
		exchange="Java4UsExChange" queue="FeedMessageQueue" />

	<bean id="java4UsMQFeedMessageProducer" class="com.java4us.amqp.Java4UsMQFeedMessageProducer" />

	<rabbit:listener-container
		connection-factory="connectionFactory">
		<rabbit:listener ref="java4UsMQFeedMessageConsumer"
			method="handleFeedMessage" queue-names="FeedMessageQueue" />
	</rabbit:listener-container>

	<bean id="java4UsMQFeedMessageConsumer" class="com.java4us.amqp.Java4UsMQFeedMessageConsumer" />

	<!--Apache Shiro Security -->
	<bean id="iniRealm" class="org.apache.shiro.realm.text.IniRealm">
		<property name="resourcePath" value="classpath:shiro.ini" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="iniRealm" />
		<property name="sessionMode" value="native" />
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />

	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.xhtml" />
		<property name="successUrl" value="/pages/main.xhtml" />
		<property name="filters">
			<util:map>
				<entry key="userFilter" value-ref="facesAjaxAwareUserFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/pages/** = authc
			</value>
		</property>
	</bean>

	<bean id="facesAjaxAwareUserFilter" class="com.java4us.view.filter.FacesAjaxAwareUserFilter" />

	<!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"> -->
	<!-- <property name="securityManager" ref="securityManager" /> -->
	<!-- <property name="loginUrl" value="/pages/login.xhtml" /> -->
	<!-- <property name="successUrl" value="/pages/tasks/tasks.xhtml" /> -->

	<!-- <property name="filterChainDefinitions"> -->
	<!-- <value> -->
	<!-- /pages/admin/** = authc -->
	<!-- </value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"> -->
	<!-- <property name="realm" ref="myIniRealm" /> -->
	<!-- <property name="sessionMode" value="native" /> -->
	<!-- </bean> -->
	<!-- <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" 
		/> -->


	<!-- <bean id="myIniRealm" class="org.apache.shiro.realm.text.IniRealm"> -->
	<!-- <constructor-arg value="classpath:shiro.ini" type="java.lang.String" 
		/> -->
	<!-- </bean> -->

	<!-- <bean id="secureRemoteInvocationExecutor" -->
	<!-- class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor"> -->
	<!-- <property name="securityManager" ref="securityManager" /> -->
	<!-- </bean> -->

	<!-- <bean id="secureRemoteInvocationFactory" -->
	<!-- class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory" 
		/> -->


</beans>